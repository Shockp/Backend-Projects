NUMBER GUESSING GAME - TO-DO LIST
================================

✅ COMPLETED CLASSES
===================

Domain Model Layer:
- com.shockp.numberguessinggame.domain.model.Game
  + Game(GameDifficulty, Player, int targetNumber)
  + startGame()
  + recordGuess(int guess): GuessResult
  + getDifficulty(): GameDifficulty
  + getPlayer(): Player
  + getState(): GameState
  + getTargetNumber(): int
  + getCurrentAttempts(): int
  + getRemainingAttempts(): int
  + isGameOver(): boolean
  + incrementPlayerScore(): void
  - generateFeedback(Game, GuessResult, int): String
  + enum GuessResult

- com.shockp.numberguessinggame.domain.model.Player
  + Player(String name)
  + getName(): String
  + getScore(): int
  + incrementScore(): void

- com.shockp.numberguessinggame.domain.model.GameState
  + NOT_STARTED
  + IN_PROGRESS
  + WON
  + LOST

- com.shockp.numberguessinggame.domain.model.difficulty.GameDifficulty
  + GameDifficulty(DifficultyStrategy)
  + easy(): GameDifficulty
  + medium(): GameDifficulty
  + hard(): GameDifficulty
  + getMaxAttempts(): int
  + getDifficultyName(): String
  + setStrategy(DifficultyStrategy): void
  + getStrategy(): DifficultyStrategy
  + equals(Object): boolean
  + hashCode(): int
  + toString(): String

- com.shockp.numberguessinggame.domain.model.difficulty.DifficultyStrategy
  + getMaxAttempts(): int
  + getDifficultyName(): String

- com.shockp.numberguessinggame.domain.model.difficulty.DifficultyEasy
  + getMaxAttempts(): int
  + getDifficultyName(): String

- com.shockp.numberguessinggame.domain.model.difficulty.DifficultyMedium
  + getMaxAttempts(): int
  + getDifficultyName(): String

- com.shockp.numberguessinggame.domain.model.difficulty.DifficultyHard
  + getMaxAttempts(): int
  + getDifficultyName(): String

Domain Services Layer:
- com.shockp.numberguessinggame.domain.service.GameService
  + GameService(NumberGeneratorService)
  + createGame(GameDifficulty, Player): Game
  + processGuess(Game, int): String
  + canAcceptGuess(Game): boolean
  + isValidGuess(int): boolean
  + getGameStatus(Game): String
  - generateFeedback(Game, GuessResult, int): String

- com.shockp.numberguessinggame.domain.service.NumberGeneratorService
  + NumberGeneratorService()
  + generateNumber(): int

Application Layer (Ports):
- com.shockp.numberguessinggame.application.port.GameRepository
  + save(Game): void
  + load(String gameId): Game
  + delete(String gameId): void

- com.shockp.numberguessinggame.application.port.UserInterface
  + displayMessage(String message): void
  + getUserInput(): String
  + displayMenu(): void

Application Layer (Use Cases):
- com.shockp.numberguessinggame.application.usecase.StartGameUseCase
  + StartGameUseCase(GameService, GameRepository, UserInterface)
  + execute(String playerName, GameDifficulty difficulty): Game
  + selectDifficulty(): GameDifficulty
  + getPlayerName(): String

- com.shockp.numberguessinggame.application.usecase.MakeGuessUseCase
  + MakeGuessUseCase(GameService, UserInterface)
  + execute(Game game, int guess): String
  + getValidGuess(Game game): int
  + validateGuess(int guess): boolean

- com.shockp.numberguessinggame.application.usecase.EndGameUseCase
  + EndGameUseCase(GameRepository, UserInterface)
  + execute(Game game): void
  + saveGameStatistics(Game game): void
  + displayFinalResult(Game game): void
  + askToPlayAgain(): boolean

Infrastructure Layer:
- com.shockp.numberguessinggame.infrastructure.persistence.InMemoryGameRepository
  + InMemoryGameRepository()
  + save(Game game): void
  + load(String gameId): Game
  + delete(String gameId): void
  + getAllGames(): List<Game>
  + generateGameId(): String
  + clearAllGames(): void

- com.shockp.numberguessinggame.infrastructure.cli.ConsoleView
  + ConsoleView()
  + ConsoleView(InputStream input, PrintStream output)
  + displayMessage(String message): void
  + getUserInput(): String
  + displayMenu(): void
  + clearScreen(): void
  + displayGameState(Game game): void
  + displayError(String error): void
  + displaySuccess(String message): void

❌ TO-DO LIST (Empty/Planned Classes)
============================

PRIORITY 1: INFRASTRUCTURE LAYER
--------------------------------
+ com.shockp.numberguessinggame.infrastructure.cli.GameController (class and method stubs exist, logic not implemented)
  + GameController(StartGameUseCase startGameUseCase, MakeGuessUseCase makeGuessUseCase, EndGameUseCase endGameUseCase, UserInterface userInterface)
    - Store all dependencies as fields. Validate that none are null. This enables orchestration of the game flow.
  + void startGame()
    - Entry point for the CLI game. Should call displayWelcomeMessage(), then runGameLoop(), then displayGoodbyeMessage().
  + void runGameLoop()
    - Main game loop. Use StartGameUseCase to create a new game (prompt for player name and difficulty). While the game is not over, prompt for guesses using MakeGuessUseCase, process guesses, and display feedback. After the game ends, call EndGameUseCase. Ask if the user wants to play again; if yes, repeat, else exit.
  + void processUserInput(String input)
    - Parse and handle user input (e.g., menu selection, commands). Route to the appropriate method or action. For simple CLI, may be used for menu navigation.
  + void handleGameState(Game game)
    - Display the current game state (attempts, remaining attempts, status) using the UserInterface. Optionally, provide hints or additional info.
  + void displayWelcomeMessage()
    - Print a stylized welcome message/banner using UserInterface.displayMessage().
  + void displayGoodbyeMessage()
    - Print a stylized goodbye/exit message using UserInterface.displayMessage().

+ com.shockp.numberguessinggame.infrastructure.factory.GameFactory (class stub only)
  + GameFactory()
    - Default constructor. No special logic unless you want to inject dependencies for advanced factories.
  + Game createGame(GameDifficulty difficulty, Player player)
    - Use a NumberGeneratorService to generate a random number (1-100). Return new Game(difficulty, player, targetNumber).
  + Player createPlayer(String name)
    - Return new Player(name).
  + GameDifficulty createDifficulty(String difficultyName)
    - Return GameDifficulty.easy(), .medium(), or .hard() based on the string (case-insensitive). Throw IllegalArgumentException for invalid input.
  + Game createGameWithDefaults()
    - Use default player name and difficulty, call createGame(). Useful for demo or test setups.

PRIORITY 2: MAIN APPLICATION
----------------------------
+ Main
  + main(String[] args): void
  + initializeDependencies(): GameController
  + setupGameServices(): GameService
  + setupRepositories(): GameRepository
  + setupUserInterface(): UserInterface

IMPLEMENTATION NOTES
===================
- Follow hexagonal architecture principles
- Use dependency injection where appropriate
- Implement proper error handling with custom exceptions
- Add comprehensive JavaDoc comments
- Consider adding unit tests for each class
- Ensure proper separation of concerns between layers
- Use SOLID principles in all implementations
- Implement proper input validation and error recovery
- Add logging for debugging and monitoring
- Follow Domain-Driven Design principles with rich services and anemic entities
- Maintain thread safety where applicable
- Document immutability and concurrency considerations 